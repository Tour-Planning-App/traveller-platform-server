// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: proto/trip.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "trip";

export interface CreateTripRequest {
  name: string;
  startDate: string;
  endDate: string;
  budget: string;
  userId: string;
}

export interface CreateTripResponse {
  id: string;
  name: string;
}

export interface GetTripRequest {
  id: string;
}

export interface GetTripResponse {
  id: string;
  name: string;
  startDate: string;
  endDate: string;
  budget: string;
}

export const TRIP_PACKAGE_NAME = "trip";

export interface TripServiceClient {
  createTrip(request: CreateTripRequest): Observable<CreateTripResponse>;

  getTrip(request: GetTripRequest): Observable<GetTripResponse>;
}

export interface TripServiceController {
  createTrip(
    request: CreateTripRequest,
  ): Promise<CreateTripResponse> | Observable<CreateTripResponse> | CreateTripResponse;

  getTrip(request: GetTripRequest): Promise<GetTripResponse> | Observable<GetTripResponse> | GetTripResponse;
}

export function TripServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createTrip", "getTrip"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ItinerariesService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ItinerariesService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const TRIP_SERVICE_NAME = "ItinerariesService";
