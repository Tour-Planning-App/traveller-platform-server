// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: proto/auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "auth";

export interface LoginRequest {
  email: string;
  password: string;
}

export interface LoginResponse {
  accessToken: string;
  isNewUser: boolean;
}

export interface OtpRequest {
  email: string;
  phone: string;
}

export interface OtpResponse {
  success: boolean;
}

export interface VerifyOtpRequest {
  email: string;
  phone: string;
  code: string;
}

export interface VerifyOtpResponse {
  accessToken: string;
  isNewUser: boolean;
}

export interface GoogleAuthRequest {
  accessToken: string;
}

export interface FacebookAuthRequest {
  accessToken: string;
}

export interface AuthResponse {
  accessToken: string;
  isNewUser: boolean;
}

export interface GetUserRequest {
  userId: string;
}

export interface UserResponse {
  id: string;
  email: string;
  phone: string;
  name: string;
  gender: string;
  preferredLanguage: string;
  preferredCurrency: string;
  role: string;
  isOnboarded: boolean;
}

export interface UpdateOnboardingRequest {
  userId: string;
  name: string;
  gender: string;
  preferredLanguage: string;
  preferredCurrency: string;
}

export const AUTH_PACKAGE_NAME = "auth";

export interface AuthServiceClient {
  login(request: LoginRequest): Observable<LoginResponse>;

  sendOtp(request: OtpRequest): Observable<OtpResponse>;

  verifyOtp(request: VerifyOtpRequest): Observable<VerifyOtpResponse>;

  googleAuth(request: GoogleAuthRequest): Observable<AuthResponse>;

  facebookAuth(request: FacebookAuthRequest): Observable<AuthResponse>;

  getUser(request: GetUserRequest): Observable<UserResponse>;

  updateOnboarding(request: UpdateOnboardingRequest): Observable<UserResponse>;
}

export interface AuthServiceController {
  login(request: LoginRequest): Promise<LoginResponse> | Observable<LoginResponse> | LoginResponse;

  sendOtp(request: OtpRequest): Promise<OtpResponse> | Observable<OtpResponse> | OtpResponse;

  verifyOtp(request: VerifyOtpRequest): Promise<VerifyOtpResponse> | Observable<VerifyOtpResponse> | VerifyOtpResponse;

  googleAuth(request: GoogleAuthRequest): Promise<AuthResponse> | Observable<AuthResponse> | AuthResponse;

  facebookAuth(request: FacebookAuthRequest): Promise<AuthResponse> | Observable<AuthResponse> | AuthResponse;

  getUser(request: GetUserRequest): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  updateOnboarding(request: UpdateOnboardingRequest): Promise<UserResponse> | Observable<UserResponse> | UserResponse;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "login",
      "sendOtp",
      "verifyOtp",
      "googleAuth",
      "facebookAuth",
      "getUser",
      "updateOnboarding",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
